package com.bluemobi.ybb.activity;

import android.content.Intent;
import android.os.Bundle;
import android.os.CountDownTimer;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;

import com.android.volley.Response;
import com.bluemobi.ybb.R;
import com.bluemobi.ybb.app.TitleBarManager;
import com.bluemobi.ybb.app.YbbApplication;
import com.bluemobi.ybb.base.BaseActivity;
import com.bluemobi.ybb.network.YbbHttpResponse;
import com.bluemobi.ybb.network.request.SmsCodeRequest;
import com.bluemobi.ybb.network.request.SmsCodeValidateRequest;
import com.bluemobi.ybb.network.response.SmsCodeResponse;
import com.bluemobi.ybb.network.response.SmsCodeValidateResponse;
import com.bluemobi.ybb.network.util.SmsType;
import com.bluemobi.ybb.util.StringUtils;
import com.bluemobi.ybb.util.Utils;
import com.bluemobi.ybb.util.WebUtils;
import com.bluemobi.ybb.view.LoadingPage;

/**
 * Created by gaoyn on 2015/6/29.
 * <p/>
 * p2 注册-手机
 */
public class RegisteredActivity extends BaseActivity implements View.OnClickListener {

    private Button button;
    private TextView agreement;
    private EditText phone;
    private String currentPhone;
    private EditText validateCode;
    private String userType;
    private String userTypeName;

    private TimeCount time;
    private Button get_code;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
/*        TitleBarManager.getInstance().init(RegisteredActivity.this, getSupportActionBar());
        TitleBarManager.getInstance().showCommonTitleBar(R.string.register, R.drawable.common_back);*/
        TitleBarManager titleBarManager = new TitleBarManager();
        titleBarManager.init(RegisteredActivity.this, getSupportActionBar());
        titleBarManager.showCommonTitleBar(R.string.register, R.drawable.common_back, true);
        userType = YbbApplication.role_bh;
        userTypeName = YbbApplication.role_bh_name;
        showLoadingPage(false);

        time = new TimeCount(60000, 1000);//构造CountDownTimer对象
    }

    @Override
    protected void initBaseData() {

    }

    @Override
    public View createSuccessView(LayoutInflater inflater) {
        View view = inflater.inflate(R.layout.activity_registered, null);
        get_code = (Button)view.findViewById(R.id.get_code);
        get_code.setOnClickListener(this);
        button = (Button) view.findViewById(R.id.next_step);
        validateCode = (EditText) view.findViewById(R.id.validateCode);
        button.setOnClickListener(this);
        view.findViewById(R.id.average_user).setOnClickListener(this);
        view.findViewById(R.id.medical_staff).setOnClickListener(this);
        phone = (EditText) view.findViewById(R.id.phone);
        agreement = (TextView) view.findViewById(R.id.service_agreement);
        agreement.setOnClickListener(this);
        return view;
    }

    @Override
    protected LoadingPage.LoadResult load() {

        return LoadingPage.LoadResult.success;
    }


    @Override
    public void clickBarleft() {

        finish();
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.next_step:
                doValidate();
                break;
            case R.id.service_agreement:
                Utils.moveTo(RegisteredActivity.this, RegistrationAgreementActivity.class);
                break;
            case R.id.get_code:
                doGetCode();
                break;
            case R.id.average_user://病患
                userType = YbbApplication.role_bh;
                userTypeName = YbbApplication.role_bh_name;
                break;
            case R.id.medical_staff://医护
                userType = YbbApplication.role_yh;
                userTypeName = YbbApplication.role_yh_name;
                break;
        }
    }

    private void doValidate() {
        if(StringUtils.isEmpty(phone.getText().toString())){
            Utils.makeToastAndShow(getBaseContext(), "请输入手机号码");
            return;
        }
        if(StringUtils.isEmpty(validateCode.getText().toString())){
            Utils.makeToastAndShow(getBaseContext(), "请输入验证码");
            return;
        }

        SmsCodeValidateRequest request = new SmsCodeValidateRequest(new Response.Listener<SmsCodeValidateResponse>() {
            @Override
            public void onResponse(SmsCodeValidateResponse response) {
                if(response != null && response.getStatus() == 0){
                    Intent intent = new Intent();
                    intent.putExtra("userType", userType);
                    intent.putExtra("userTypeName", userTypeName);
                    intent.putExtra("registerPhone", phone.getText().toString());
                    intent.setClass(RegisteredActivity.this, RegisteredNextActivity.class);
                    startActivity(intent);
                }else{
                    Utils.makeToastAndShow(getBaseContext(), "验证码错误");
                }
            }
        }, this);
        request.setHandleCustomErr(false);
        request.setCellphone(currentPhone);
        request.setType(SmsType.REGISTER);
        request.setValidationCode(validateCode.getText().toString());
        WebUtils.doPost(request);

    }

    private void doGetCode() {
        currentPhone = phone.getText().toString();
        if (StringUtils.isEmpty(currentPhone)) {
            Utils.makeToastAndShow(getBaseContext(), "手机号不能为空");
            return;
        }
        if (!Utils.checkPhoneNum(currentPhone)) {
            Utils.makeToastAndShow(getBaseContext(), "手机号不合法");
            return;
        }

        SmsCodeRequest request = new SmsCodeRequest(new Response.Listener<SmsCodeResponse>() {
            @Override
            public void onResponse(SmsCodeResponse response) {
                Utils.closeDialog();
                if (response != null && response.getStatus() == 0) {
                    time.start();
                    Utils.makeToastAndShow(getBaseContext(), "验证码已发送");
                } else {
                    Utils.makeToastAndShow(getBaseContext(), "验证码获取失败，请重新获取");
                }
            }
        }, this);
        request.setType(SmsType.REGISTER);
        request.setCellphone(currentPhone);
        Utils.showProgressDialog(this);
        WebUtils.doPost(request);
    }

    private class TimeCount extends CountDownTimer{
        /**
         * @param millisInFuture    The number of millis in the future from the call
         *                          to {@link #start()} until the countdown is done and {@link #onFinish()}
         *                          is called.
         * @param countDownInterval The interval along the way to receive
         *                          {@link #onTick(long)} callbacks.
         */
        public TimeCount(long millisInFuture, long countDownInterval) {
            super(millisInFuture, countDownInterval);//参数依次为总时长,和计时的时间间隔
        }

        @Override
        public void onTick(long millisUntilFinished) {//计时过程显示

            get_code.setClickable(false);
            get_code.setText(millisUntilFinished /1000+"秒");
        }

        @Override
        public void onFinish() {//计时完毕时触发
            get_code.setText("重新验证");
            get_code.setClickable(true);
        }
    }
}
